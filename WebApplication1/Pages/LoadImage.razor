@page "/loadimage"
@inject IJSRuntime JsRuntime
@inject ImageGrayscaler ImageGrayscaler

<h1>Load image from a file input</h1>

<p>This component demonstrates loading and processing an image in Blazor.</p>

<p>Select an image from your computer and it will be grayscaled and displayed below, side-by-side with the original.</p>

<p>The image never leaves your computer, this all happens in your browser.</p>

<p><input type="file" accept=".png,.jpg,.jpeg,.gif"></p>
<div class="loading-spinner" id="loading-spinner" style="display: none"><div></div><div></div><div></div></div>
<img id="before" alt="Before" style="display: none">
<img id="after" alt="After" style="display: none">

@code {
    //Blazor version of "on document ready" so JS on the page doesn't run until the file input is rendered and ready
    //idea from here: https://github.com/aspnet/Blazor/issues/1084
    //but it got outdated and had to be adapted per docs here: https://docs.microsoft.com/en-us/aspnet/core/blazor/javascript-interop
    protected override async Task OnAfterRenderAsync()
    {
        //call some JS which sets up the file input with a change handler
        //which reads the selected file's content into a base64-encoded string
        //and passes that to ProcessImage below for further processing
        await JsRuntime.InvokeAsync<string>("onBlazorReady", DotNetObjectRef.Create(this));
    }

    //JS in load-image.js will call this when a file is selected in the file input
    [JSInvokable]
    public string ProcessImage(string base64ImageData)
    {
        //TODO: put file size restrictions on the JS side
        //images bigger than around 500KB or so take too long to make it across the interop boundary and make the browser unresponsive
        
        //Console.WriteLine("Image data received in .NET: " + base64ImageData);
        return ImageGrayscaler.Grayscale(base64ImageData);
    }
}
